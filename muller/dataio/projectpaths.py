from pathlib import Path
from typing import Dict, List, Union


class PathsGraphics:
	""" Split up from the `ProjectPaths` class so it can be used independantly.
		Expected structure:
		`graphics_folder`
		|----`unique/`
		|----`clade/`
		|----`pairwisedistance.svg`
		|----`dentrogram.png`
	"""

	def __init__(self, graphics_folder: Path, name: str, render: bool, palette_names: List[str]):
		self.graphics_folder = checkdir(graphics_folder)
		self.render = render
		# Refactored so that the filenames are automatically generated for each palette.
		self.palette_names = palette_names
		self.palette_folders = {name: self.graphics_folder / name for name in self.palette_names}

		self.files_panel = self.parametrize(name+'.panel', render = render)

		# The muller diagram generator will automatically add filetype extensions and an svg render of each file.
		self.files_muller_diagram: Dict[str,List[Path]] = self.parametrize(name + '.mullerdiagram', )

		##Timeseries plots
		self.files_timeseries_genotype: Dict[str,List[Path]] = self.parametrize(name + ".genotypes")
		self.filename_timeseries_trajectory: Path =self.graphics_folder / (name + '.trajectories')
		## Geneology plots
		self.files_lineage_image: Dict[str,List[Path]] = self.parametrize(name + '.geneology')

		## Other plots
		# The palette for these plots is fixed, since they arn'e linked to genotypes/trajectories.
		self.distance_heatmap: Path = self.graphics_folder / (name + f".pairwisedistance.svg")
		self.linkage_plot = self.graphics_folder / (name + f".dendrogram.png")

	def parametrize(self, basename: str, render: bool = True) -> Dict[str, List[Path]]:
		""" Each graphic has two colorschemes available, and can be rendered as a .png or .svg file.
			This method simplifies the parametrized paths.
			Parameters
			----------
			basename: Path
			render: bool; default True
				Whether to render the graphics as svg files
			Returns
			-------
				A map of filenames to their respective palette.
		"""
		paths = dict()
		for palette_name in self.palette_names:
			palette_folder = checkdir(self.graphics_folder / palette_name)
			filename_norender = palette_folder / f"{basename}.{palette_name}.norender.png"
			_filenames = [filename_norender]
			if render:
				filename_render = palette_folder / f"{basename}.{palette_name}.render.svg"
				_filenames.append(filename_render)
			paths[palette_name] = _filenames
		return paths


class PathsData:
	""" Split up from the `ProjectPaths` class so it can be used independently"""

	def __init__(self, tables_folder: Path, name: str, suffix: str = ".tsv"):
		self.tables_folder = tables_folder
		self.suffix = suffix
		self.filename_trajectories_final: Path = self.tables_folder / (name + f'.trajectories.original.{self.suffix}')
		self.filename_trajectories_filtered: Path = self.tables_folder / (name + f"trajectories.filtered.{self.suffix}")
		self.original_genotype: Path = self.tables_folder / (name + f'.genotypes.original.{self.suffix}')
		self.filename_score_records: Path = self.tables_folder / (name + f".scorerecords.{self.suffix}")

		self.ggmuller_population: Path = self.tables_folder / (name + f'.ggmuller.populations.{self.suffix}')
		self.ggmuller_edges: Path = self.tables_folder / (name + f'.ggmuller.edges.{self.suffix}')
		self.table_muller: Path = self.tables_folder / (name + f".mullerdataframe.{self.suffix}")

		self.linkage_matrix_table = self.tables_folder / (name + f".linkagematrix.tsv")
		self.distance_matrix: Path = self.tables_folder / (name + f".distance.{self.suffix}")


class ProjectPaths:
	""" Used to organize the files generated by the workflow.
		Expected Folder Structure
		-------------------------
		`output_folder/`
		|----`graphics/`
		|----|----`unique/`
		|----|----`clade/`
		|----`tables/`
	"""

	def __init__(self, output_folder: Path, name: str, suffix = 'tsv'):
		self.suffix = suffix

		self.output_folder = checkdir(output_folder)

		# Create the relevant folders for the project
		self.supplementary_folder = checkdir(self.output_folder / "supplementary-files")
		self.graphics_folder = checkdir(self.output_folder / "graphics")
		self.graphics_distinctive_folder = checkdir(self.graphics_folder / "distinctive")
		self.graphics_clade_folder = checkdir(self.graphics_folder / "clade")
		self.tables_folder = checkdir(self.output_folder / "tables")
		self.scripts_folder = checkdir(self.output_folder / "scripts")

		# General Files
		self.trajectory_table: Path = output_folder / (name + f'.trajectories.{suffix}')
		self.filename_table_genotype: Path = output_folder / (name + f'.genotypes.{suffix}')
		self.muller_panel: Path = output_folder / (name + f".panel")

		# tables
		self.data_paths = PathsData(self.tables_folder, name, self.suffix)

		# graphics
		self.paths_graphics = PathsGraphics(self.graphics_folder, name)

		# scripts
		self.r_script: Path = self.scripts_folder / (name + '.r')
		self.muller_diagram_r_script: Path = self.graphics_folder / (name + '.rscript.png')

		# supplementary files
		self.parameters: Path = self.supplementary_folder / (name + '.options.json')
		self.lineage_confidence_scores: Path = self.supplementary_folder / (name + '.lineagescores.tsv')
		self.genotype_information: Path = self.supplementary_folder / (name + '.genotypeinformation.json')

	@property
	def delimiter(self) -> str:
		if self.suffix == 'tsv':
			return '\t'
		else:
			return ','


def checkdir(path: Union[str, Path]) -> Path:
	path = Path(path)
	if not path.exists():
		path.mkdir()
	return path.absolute()
